!function ($, window, document) {

  var timer = 0;
  function debounce(callback, ms) {
    return function () {
      var that = this, args = arguments;
      clearTimeout(timer);
      timer = setTimeout(function () {
        callback.apply(that, args);
      }, ms);
    };
  }

  function onKeyUp(e) {
    var value = $(e.target).val().trim();
    if (value === "") {
      // Clear results and hide quick view
      $(".rd-navbar-live-search-results").html("").removeClass("not-empty");
    } else {
      // Execute query
      $.get(this.options.handler, {
        key: this.options.key,
        cx: this.options.cx,
        q: value
      }, onLiveSearchSuccess.bind(this));
    }
  }

  function onLiveSearchSuccess(response) {
    var value = response.queries.request[0].searchTerms;

    // Create html block the old fashioned way
    var items = '';
    if (!response.items) {
      items = `
        <li>
          <div class="search_error">No results found for "<span class="search">${value}</span>"<div/>
        </li>
      `;
    } else {
      for (var i = 0; i < response.items.length && i < 3; i++) {
        var item = response.items[i];
        items += `
          <li class="result-item">
            <a target="_top" href="${item.link}" class="search_link">
              <div class="search_title">${item.title}</div>
              <p>${item.snippet.substring(0, 65)}...</p>
            </a>
          </li>
        `;
      }
    }
    var html = `
      <div id="search-results">
        <div class="search-quick-result">Quick Results</div>
        <ol class="search_list">
          ${items}
        </ol>
      </div>
    `;

    // Add results and show quick view
    $(".rd-navbar-live-search-results").html(html).addClass("not-empty");
  }

  function onSearchSuccess(response) {
    var value = response.queries.request[0].searchTerms;

    // Create html block the old fashioned way
    var items = '';
    if (!response.items) {
      items = `
        <li>
          <div class="search_error">No results found for "<span class="search">${value}</span>"<div/>
        </li>
      `;
    } else {
      for (var i = 0; i < response.items.length; i++) {
        var item = response.items[i];
        items += `
          <li class="col-xs-12 section-border">
            <h3 class="text-dark-variant-3">
              <a target="_top" href="${item.link}">${item.htmlTitle}</a>
            </h3>
            <p class="lead">${item.htmlSnippet.replace(/<br>/g, '')}</p>
            <p class="match"><em>From: ${item.htmlFormattedUrl}</em></p>
          </li>
        `;
      }
    }
    var html = `
      <div id="search-results">
        <ul class="search-results-list text-left row">
          ${items}
        </ul>
      </div>
    `;

    // Add results to search results
    $(".rd-navbar-search-results").html(html);
    $(".rd-navbar-search-stats").html(`${response.queries.request[0].totalResults} Search results for: ${response.queries.request[0].searchTerms}`);
    $(".rd-navbar-search-box").val(value);
  }

  function RDSearch(element, options) {
    this.$element = $(element);
    this.options = $.extend({}, RDSearch.Defaults, options);
    this.attach();
    this.render();
  };

  RDSearch.Defaults = {
    handler: "https://www.googleapis.com/customsearch/v1",
    key: 'AIzaSyDA1yOphX9A0cnJmKUi8GFHsfwV-9TDgjo',
    cx: '001251072435385453769:_x8vg9swdv0'
  };
  RDSearch.prototype = {
    attach: function () {
      // Attach keyup event to live search box
      $(".rd-navbar-search-form-input").find("input")
        .val("").on("keyup", debounce(onKeyUp.bind(this), 400));
    },

    render: function() {
      if ($(".rd-navbar-search-results").length) {
        var q = location.search.replace(/^\?.*q=([^&]+)/, "$1");
        $.get(this.options.handler, {
          key: this.options.key,
          cx: this.options.cx,
          q: decodeURI(q)
        }, onSearchSuccess.bind(this));
      }
    }
  };

  $.fn.RDSearch = function (options) {
    return this.each(function () {
      if (!$(this).data("rdsearch")) {
        $(this).data("rdsearch", new RDSearch(this, options));
      }
    });
  };
  $.fn.RDSearch.Constructor = RDSearch;

}(window.jQuery, window, document);
